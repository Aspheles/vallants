<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!-- Created with Inkscape (http://www.inkscape.org/) -->

<svg
   width="523.81543"
   height="499.99948"
   viewBox="0 0 138.59283 132.29153"
   version="1.1"
   id="svg1"
   inkscape:version="1.4 (86a8ad7, 2024-10-11)"
   sodipodi:docname="Vallants Assets.svg"
   xml:space="preserve"
   xmlns:inkscape="http://www.inkscape.org/namespaces/inkscape"
   xmlns:sodipodi="http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd"
   xmlns="http://www.w3.org/2000/svg"
   xmlns:svg="http://www.w3.org/2000/svg"><sodipodi:namedview
     id="namedview1"
     pagecolor="#505050"
     bordercolor="#eeeeee"
     borderopacity="1"
     inkscape:showpageshadow="0"
     inkscape:pageopacity="0"
     inkscape:pagecheckerboard="0"
     inkscape:deskcolor="#505050"
     inkscape:document-units="px"
     showborder="true"
     inkscape:zoom="0.35355339"
     inkscape:cx="9418.6623"
     inkscape:cy="7199.7613"
     inkscape:window-width="1920"
     inkscape:window-height="1017"
     inkscape:window-x="-8"
     inkscape:window-y="1072"
     inkscape:window-maximized="1"
     inkscape:current-layer="layer1"
     showguides="true"
     showgrid="false"><inkscape:page
       x="0"
       y="-5.209818e-13"
       width="138.59283"
       height="132.29153"
       id="page2"
       margin="0"
       bleed="0" /></sodipodi:namedview><defs
     id="defs1" /><g
     inkscape:label="Layer 1"
     inkscape:groupmode="layer"
     id="layer1"
     transform="translate(-2376.428,-1875.727)"><path
       id="path2310"
       style="fill:#1d0d4c;fill-opacity:1;stroke-width:0.367346;stroke-linecap:round;paint-order:markers stroke fill"
       d="m 2447.4824,1875.729 c -0.6822,0.01 -1.3704,0.054 -2.0625,0.1349 -11.0732,1.289 -19.0276,11.34 -17.7386,22.4132 0.3904,3.3535 1.5874,6.4186 3.3701,9.0297 -8.0865,3.7492 -14.4729,10.5369 -17.6959,18.8952 -3.7734,-5.5452 -10.134,-8.9219 -16.905,-8.8575 -1.6662,0.016 -3.3569,0.2398 -5.0395,0.6906 -10.7681,2.8853 -17.1769,13.9855 -14.2916,24.7536 2.8853,10.7682 13.9859,17.1774 24.754,14.2921 4.646,-1.2449 8.4727,-4.0243 11.0986,-7.6419 0.9849,2.7507 2.2195,5.2826 3.4231,7.9655 3.6516,8.1397 13.4889,21.5002 14.1774,22.4318 v 4.2513 c -1.1218,0.2514 -1.981,1.2801 -1.981,2.4461 0,1.1661 0.8591,2.0486 1.981,2.1088 v 2.5611 c -1.1218,0.2514 -1.981,1.2801 -1.981,2.4461 0,1.1661 0.8591,2.0486 1.981,2.1089 v 2.561 c -1.1218,0.2514 -1.981,1.2801 -1.981,2.4462 0,1.166 0.8591,2.0485 1.981,2.1088 v 0.6196 c 0,2.4854 2.039,4.5244 4.5244,4.5244 h 20.8719 c 2.4855,0 4.5237,-2.039 4.5237,-4.5244 v -3.1687 c 1.1219,-0.2513 1.9811,-1.2802 1.9811,-2.4463 0,-1.1661 -0.8592,-2.0485 -1.9811,-2.1087 v -2.5608 c 1.1219,-0.2513 1.9811,-1.2803 1.9811,-2.4464 0,-1.1661 -0.8592,-2.0486 -1.9811,-2.1088 v -2.5608 c 1.1219,-0.2513 1.9811,-1.2803 1.9811,-2.4464 0,-1.1661 -0.8592,-2.0486 -1.9811,-2.1088 v -1.7015 c 0.6869,-0.9295 10.5252,-14.2921 14.1772,-22.4325 1.021,-2.2759 2.0648,-4.4427 2.9613,-6.7251 2.3277,3.7738 5.897,6.8149 10.3908,8.4167 10.5009,3.7428 22.0809,-1.7514 25.8237,-12.2523 3.7428,-10.5009 -1.7514,-22.0808 -12.2523,-25.8237 -2.297,-0.8187 -4.6457,-1.1955 -6.9527,-1.1744 -6.3864,0.058 -12.4475,3.1693 -16.2148,8.3839 -2.5599,-8.1284 -8.0551,-14.9578 -15.2422,-19.2501 3.4799,-4.1192 5.3205,-9.6075 4.649,-15.3761 -1.2084,-10.3812 -10.1171,-18.0219 -20.3501,-17.8743 z m 0.037,2.4292 c 9.0216,-0.1349 16.8337,6.5677 17.8998,15.726 0.6128,5.2647 -1.1371,10.2454 -4.4043,13.9023 -0.6826,-0.3437 -1.38,-0.6614 -2.0876,-0.9602 3.1634,-3.2507 4.8988,-7.8397 4.334,-12.6909 -0.9336,-8.0212 -7.8105,-13.9194 -15.7163,-13.8047 -0.527,0.01 -1.0586,0.042 -1.5934,0.1042 -8.556,0.9959 -14.6955,8.7541 -13.6996,17.3101 0.347,2.9803 1.5181,5.6641 3.2539,7.8585 -0.7354,0.2232 -1.4588,0.4734 -2.1726,0.7435 -1.7195,-2.3806 -2.8744,-5.2211 -3.2387,-8.3508 -1.1371,-9.7689 5.8372,-18.5814 15.606,-19.7186 0.6106,-0.071 1.2174,-0.1104 1.8188,-0.1194 z m 0.044,3.3872 c 7.3002,-0.1084 13.6285,5.3207 14.491,12.7305 0.5426,4.6618 -1.2066,9.0512 -4.35,12.0613 -0.9246,-0.3491 -1.8678,-0.6592 -2.8283,-0.9291 0.2543,-0.1111 0.5165,-0.2398 0.821,-0.4127 l 0.4492,-0.2545 -0.1889,-1.6535 c -0.1059,-0.909 -0.1841,-1.8191 -0.1781,-2.022 0.01,-0.2028 -0.034,-0.3898 -0.089,-0.4154 -0.055,-0.025 -0.3251,0.1113 -0.601,0.3043 -1.2783,0.8942 -2.3587,1.2567 -3.5284,1.1832 -0.3908,-0.025 -1.6,-0.093 -2.6875,-0.1528 -1.0875,-0.059 -1.9897,-0.1137 -2.0049,-0.1211 -0.015,-0.01 0.078,-0.2932 0.2061,-0.6356 0.318,-0.8467 0.4084,-1.5656 0.3461,-2.7514 l -0.052,-1.0013 1.6515,-0.1923 1.6515,-0.1923 -0.1442,-1.6711 -0.1441,-1.6711 -2.1088,0.2456 c -1.9335,0.2253 -2.1187,0.2318 -2.2262,0.077 -0.065,-0.093 -0.2745,-0.6681 -0.4666,-1.2785 -0.5411,-1.7192 -0.4734,-2.6263 0.2559,-3.434 0.5637,-0.6244 0.8447,-0.7633 1.7694,-0.8748 0.7177,-0.087 0.927,-0.072 1.3702,0.094 0.7079,0.2659 1.1067,0.7809 1.3735,1.774 l 0.2034,0.7572 1.9758,-0.2299 1.9761,-0.2301 -0.032,-0.2733 c -0.018,-0.1503 -0.1125,-0.5558 -0.2105,-0.901 -0.7497,-2.6395 -2.6256,-4.1844 -5.3738,-4.4259 -0.2567,-0.022 -0.5104,-0.034 -0.7601,-0.036 -0.2497,0 -0.4956,0.01 -0.7371,0.026 -0.2113,0.017 -0.4193,0.041 -0.6236,0.073 v -2e-4 c -3.0651,0.4727 -5.3033,2.6045 -5.517,5.5199 -0.088,1.1997 0.055,2.0329 0.6496,3.7769 l 0.1072,0.3151 -0.8897,0.1036 -0.8897,0.1035 0.1588,1.5754 c 0.122,1.2065 0.1926,1.5972 0.3024,1.6675 0.085,0.054 0.653,0.033 1.387,-0.049 l 1.243,-0.1407 0.1321,0.8915 c 0.2939,1.975 -0.1892,3.3215 -1.5813,4.406 l -0.6004,0.4679 0.069,0.6321 c -0.9288,0.1129 -1.8495,0.2527 -2.7543,0.4378 -0.6085,0.1245 -1.2089,0.2706 -1.8052,0.4267 -1.7758,-2.0913 -2.9796,-4.7085 -3.321,-7.6416 -0.92,-7.9038 4.7299,-15.0425 12.6337,-15.9625 0.494,-0.058 0.9849,-0.089 1.4715,-0.097 z m -2.0317,25.0025 v 0 c 1.6607,0 3.2912,0.1264 4.8824,0.3695 l -0.3603,-0.1148 c 10e-5,0 0.3856,0.1107 0.4148,0.119 h -0.054 c 0.5303,0.081 1.0563,0.1752 1.5777,0.2819 v 0 c 14.6013,2.9889 25.5932,15.8978 25.5851,31.396 0,7.5148 -2.5059,11.9667 -5.1285,17.8126 -3.3934,7.564 -13.202,20.9919 -13.8063,21.8177 h -9.4287 c 0.027,-2.9661 0.048,-13.5335 0.048,-14.6232 v -2.1945 l 0.5022,-0.097 c 3.0842,-0.5948 5.3709,-1.7096 7.1361,-3.479 1.8774,-1.8819 2.7236,-4.4004 2.4684,-7.3461 -0.2019,-2.3297 -0.8635,-3.9245 -2.2122,-5.3322 -1.4833,-1.5481 -4.1709,-3.1557 -7.1693,-4.2885 l -0.7252,-0.2741 v -6.7792 -6.7793 l 0.244,0.018 c 2.2049,0.1651 4.2928,0.6264 5.9696,0.8552 1.6769,0.2287 1.7954,-1.0102 1.5403,-1.6637 -0.1702,-0.436 -0.677,-0.9781 -1.3057,-1.3964 -1.2002,-0.7986 -2.9748,-1.334 -5.4293,-1.6383 l -1.0189,-0.1264 v -2.1273 c -2e-4,-1.3385 -0.023,-2.2124 -0.062,-2.3569 -0.1951,-0.7244 -0.927,-1.1443 -1.6443,-0.9434 -0.3472,0.097 -0.7644,0.5005 -0.8638,0.8352 -0.05,0.1673 -0.07,0.8475 -0.07,2.3304 v 2.094 l -0.784,0.038 c -0.4313,0.021 -0.9736,0.038 -1.2054,0.038 h -0.4217 v -2.1958 c 0,-2.484 0,-2.4797 -0.4497,-2.864 -0.2581,-0.221 -0.5571,-0.3322 -0.8521,-0.3333 v -2e-4 c -0.2951,0 -0.5862,0.1078 -0.8286,0.3269 -0.4367,0.3945 -0.4194,0.2808 -0.4514,2.9663 l -0.029,2.4061 -0.8036,0.1608 c -2.1711,0.4343 -4.0874,1.2433 -5.5683,2.3505 -1.9337,1.4456 -3.0566,3.2526 -3.457,5.563 -0.067,0.3844 -0.096,0.8943 -0.096,1.7229 0,1.8365 0.2067,2.9106 0.7978,4.1043 0.9955,2.0107 2.892,3.5447 6.0032,4.8553 0.3921,0.1652 1.2554,0.5103 1.9185,0.7671 l 1.2054,0.467 0.014,7.2451 0.015,7.2451 h -0.198 c -0.3278,0 -1.7145,-0.219 -2.5631,-0.4049 -1.8085,-0.3962 -3.9578,-1.2363 -5.5596,-1.4598 -1.6017,-0.2235 -1.7825,0.5398 -1.5818,1.4873 0.1075,0.5075 0.3594,0.9319 0.8445,1.4226 1.1872,1.2008 3.5266,2.1471 6.497,2.6282 0.8866,0.1436 2.1113,0.2873 2.4602,0.2873 0.094,2e-4 0.099,0.1449 0.1016,2.2246 0,1.6557 0.015,10.5971 0.07,14.2647 h -9.2803 c -0.6043,-0.8258 -10.4137,-14.2537 -13.807,-21.8177 -2.6226,-5.846 -5.1246,-10.2978 -5.1285,-17.8126 -0.01,-15.4993 10.9857,-28.409 25.5885,-31.3968 2.0861,-0.4268 4.2459,-0.6513 6.4601,-0.6513 z m 5.1801,0.3741 v 0 c -0.054,0 -0.1141,0.01 -0.1141,0.01 l -0.076,-0.01 c 0.046,0 0.1448,0 0.1902,0 z m -53.7333,12.8509 c 6.4235,0.114 12.3435,3.7294 15.3678,9.4524 -0.3355,1.1905 -0.608,2.4067 -0.8149,3.6455 -2.0905,-6.6556 -8.3027,-10.9898 -15.0369,-10.9246 -1.287,0.013 -2.5931,0.1857 -3.8931,0.534 -8.3202,2.2294 -13.2671,10.7971 -11.0377,19.1173 2.2294,8.3202 10.7977,13.2675 19.1179,11.0382 5.1272,-1.3738 8.9702,-5.1564 10.6455,-9.8033 0.1696,1.2793 0.4135,2.4796 0.7107,3.6271 -2.274,3.9347 -6.048,7.0023 -10.7941,8.274 -9.4997,2.5454 -19.2322,-3.0742 -21.7777,-12.5739 -2.5454,-9.4997 3.0736,-19.2318 12.5733,-21.7772 1.6525,-0.4428 3.3119,-0.6384 4.9392,-0.6095 z m 97.8514,2.4959 c 1.9729,0 3.9797,0.3392 5.9466,1.0402 9.264,3.302 14.082,13.4551 10.78,22.719 -3.302,9.264 -13.456,14.0816 -22.72,10.7796 -4.669,-1.6642 -8.2044,-5.0704 -10.1432,-9.2247 0.3742,-1.2539 0.6974,-2.5573 0.9218,-3.9627 1.1757,4.9856 4.7723,9.2958 9.9508,11.1416 8.1137,2.8919 17.052,-1.3494 19.944,-9.4631 2.892,-8.1137 -1.3488,-17.0521 -9.4625,-19.9441 -1.7749,-0.6326 -3.5892,-0.924 -5.3711,-0.9081 -6.3638,0.057 -12.3136,4.0318 -14.5729,10.3706 -0.082,0.2308 -0.1571,0.4624 -0.2278,0.6943 -0.1225,-1.3855 -0.3333,-2.7452 -0.6151,-4.0789 3.1622,-5.7235 9.1858,-9.1772 15.5694,-9.1637 z m -98.3199,0.8903 c 6.4133,-0.066 12.2977,4.188 14.0354,10.673 2.0594,7.686 -2.4924,15.5702 -10.1784,17.6297 -7.686,2.0594 -15.5698,-2.4928 -17.6292,-10.1788 -2.0595,-7.686 2.492,-15.5702 10.178,-17.6296 1.2009,-0.3218 2.4066,-0.4821 3.5942,-0.4943 z m 98.1718,2.4991 c 1.6437,-0.014 3.3183,0.2562 4.9578,0.8405 7.4953,2.6716 11.3977,10.8968 8.7262,18.3921 -2.6715,7.4952 -10.8968,11.3978 -18.392,8.7263 -7.4952,-2.6715 -11.3977,-10.8967 -8.7261,-18.392 2.0871,-5.8556 7.5639,-9.5185 13.4341,-9.5669 z m -95.8805,0.4859 c -1.0659,0.01 -2.1032,0.1438 -3.0827,0.4016 h -2e-4 c -1.6325,0.4294 -3.1047,1.1936 -4.2826,2.2441 -1.115,0.9945 -2.2214,2.6449 -2.6587,3.9656 -0.3758,1.1349 -0.6043,2.5787 -0.5718,3.6142 l 0.01,0.1889 -1.0591,0.2838 -1.059,0.2838 0.2944,1.0981 0.2942,1.0988 0.8723,-0.2339 0.8723,-0.2337 0.1991,0.743 0.1989,0.743 -0.8722,0.2337 -0.8721,0.2337 0.2938,1.0966 0.2939,1.0971 1.016,-0.2533 1.0161,-0.2534 0.3668,0.6637 c 0.7326,1.3244 1.3717,2.0662 2.5711,2.9849 1.956,1.4983 4.5702,2.1257 7.2813,1.7472 h 4e-4 c 0.7711,-0.1077 2.3216,-0.5902 3.1318,-0.9742 1.1355,-0.5385 2.6815,-1.6228 2.6233,-1.8399 -0.027,-0.1008 -1.2294,-2.4728 -1.4955,-2.9501 -0.1149,-0.2062 -0.1638,-0.2443 -0.2367,-0.1846 -0.2686,0.2202 -1.2656,0.8552 -1.6631,1.0593 -0.6453,0.3314 -2.0233,0.7566 -2.665,0.8222 -0.7327,0.075 -1.495,0.022 -2.1053,-0.146 -0.7017,-0.1932 -1.5805,-0.7155 -2.031,-1.207 -0.3157,-0.3444 -0.8352,-1.0902 -0.8825,-1.2669 -0.011,-0.042 1.3223,-0.4153 3.9141,-1.0934 l 3.9313,-1.0287 -0.281,-1.1193 -0.2812,-1.1192 -4.1711,1.1177 -4.1712,1.1176 -0.1763,-0.732 -0.1764,-0.7316 4.1425,-1.128 4.1423,-1.1278 -0.2885,-1.0993 -0.2882,-1.0997 -3.9172,1.0497 -3.9171,1.0496 v -0.1896 c -0.01,-0.3712 0.1369,-1.2333 0.2766,-1.6648 0.2117,-0.6542 0.7922,-1.5367 1.3024,-1.9803 0.7599,-0.6606 1.2145,-0.8943 2.322,-1.1873 1.0911,-0.2885 1.6755,-0.346 2.86,-0.275 0.4011,0.024 0.7404,0.024 0.7539,0 0.023,-0.04 -0.044,-3.5899 -0.069,-3.6846 -0.017,-0.065 -0.9595,-0.1397 -1.6982,-0.1352 z m 47.8209,0.8461 v 6.3518 c 0,5.0461 -0.015,6.3507 -0.072,6.3464 -0.039,0 -0.5819,-0.1724 -1.2054,-0.3764 l -1.1337,-0.371 v -5.8475 -5.8474 l 0.1578,-0.033 c 0.3431,-0.072 1.0011,-0.147 1.6116,-0.1841 z m -5.0316,1.1079 c 0.021,0 0.038,2.2086 0.038,4.9081 0,2.6994 -0.019,4.9069 -0.043,4.9069 -0.1539,0 -1.2647,-0.7833 -1.6682,-1.1707 -1.0601,-1.0176 -1.5609,-2.2002 -1.5609,-3.6863 0,-1.8477 0.9089,-3.4353 2.6175,-4.5723 0.3187,-0.2121 0.5965,-0.3857 0.6171,-0.3857 z m 47.1347,0.1401 c -0.1501,-0.011 -0.133,0.06 -0.079,0.1818 0.022,0.05 0.066,0.244 0.097,0.4315 0.031,0.1876 0.1988,1.1317 0.3727,2.0982 1.1421,6.3477 1.3442,7.4832 1.3364,7.5052 0,0.014 -0.7854,-0.2425 -1.7343,-0.5687 l -1.725,-0.5934 -0.4347,1.2489 c -0.239,0.6869 -0.4429,1.2731 -0.453,1.3026 -0.01,0.029 1.1039,0.4535 2.4752,0.9423 l 2.4935,0.8888 -0.3559,0.936 -0.356,0.9361 -0.5387,-0.1763 c -0.2963,-0.097 -1.4205,-0.4884 -2.4978,-0.8701 l -1.9587,-0.6934 -0.4362,1.2684 -0.4363,1.2687 2.4644,0.9182 2.4642,0.9186 -0.8123,2.3376 -0.8121,2.3379 2.775,0.9891 2.7749,0.989 0.838,-2.3495 0.8371,-2.349 2.4912,0.888 2.4915,0.888 0.4566,-1.2812 0.4567,-1.2811 -2.4914,-0.888 -2.4913,-0.8881 0.3426,-0.9609 0.3425,-0.9609 2.4912,0.888 2.4913,0.888 0.4717,-1.3235 0.4717,-1.3235 -1.7472,-0.5958 c -0.9609,-0.3278 -1.7583,-0.6202 -1.7722,-0.6485 -0.014,-0.029 0.4274,-0.431 0.9805,-0.8932 0.553,-0.4622 1.5365,-1.2827 2.1851,-1.8237 0.6486,-0.5409 1.4208,-1.1862 1.7163,-1.434 0.2954,-0.2476 1.1367,-0.9531 1.8696,-1.5676 0.7329,-0.6145 1.3374,-1.1306 1.3431,-1.1468 0,-0.01 -0.3127,-0.1262 -0.8233,-0.3105 h -2e-4 c -0.5102,-0.1858 -1.2168,-0.4338 -1.9944,-0.7058 -2.4271,-0.8472 -2.842,-0.9748 -2.9251,-0.9011 -0.1332,0.1181 -2.096,2.0784 -2.1043,2.1015 0,0.01 -0.4036,0.4132 -0.8887,0.8953 -0.4852,0.4821 -1.0133,1.0101 -1.1736,1.1735 -1.4341,1.4616 -2.0273,2.0239 -2.0709,1.9629 -0.028,-0.039 -0.08,-0.4072 -0.1161,-0.817 -0.055,-0.6292 -0.339,-3.6207 -0.6719,-7.0783 l -0.082,-0.8513 -2.8004,-0.9982 c -1.7819,-0.6351 -2.4967,-0.8853 -2.747,-0.9044 z m -44.4424,15.9906 c 0.039,0 0.5822,0.17 1.2059,0.378 l 1.1338,0.3781 -0.015,6.3238 -0.014,6.3241 -0.4592,0.067 h -2e-4 c -0.2526,0.037 -0.7884,0.086 -1.191,0.1089 l -0.732,0.042 v -6.811 c 0,-5.4088 0.015,-6.8111 0.072,-6.8111 z m 4.9801,1.8839 0.3842,0.2111 c 1.5583,0.8565 2.5169,2.0525 2.9219,3.6455 0.1636,0.6434 0.151,2.2029 -0.023,2.833 -0.3583,1.299 -1.2629,2.5521 -2.4995,3.463 -0.1943,0.1431 -0.4502,0.3096 -0.5686,0.3701 l -0.2152,0.1099 v -5.3164 z m -2.6409,15.628 v 2.1939 c 0,1.6294 0.011,10.289 0.065,14.2916 h -2.6701 c 0.1812,-4.3091 0.1873,-12.3961 0.1889,-14.209 0,-1.6841 0.017,-2.1737 0.073,-2.1908 0.039,-0.012 0.5818,-0.036 1.2053,-0.054 z m -13.6212,18.9156 h 25.0613 v 1.0642 l -25.0613,2.1352 z m 25.0613,5.6689 v 2.5113 l -25.0613,2.1352 v -2.5115 z m 0,7.116 v 2.5113 l -25.0613,2.1352 v -2.5115 z m 0,7.116 v 2.9369 c 0,1.1813 -0.9129,2.0951 -2.0942,2.0951 h -20.8719 c -1.1813,0 -2.0952,-0.9138 -2.0952,-2.0951 v -0.8018 z"
       inkscape:export-filename="..\..\Desktop\path2310.png"
       inkscape:export-xdpi="96"
       inkscape:export-ydpi="96" /></g><script
     id="mesh_polyfill"
     type="text/javascript">
!function(){const t=&quot;http://www.w3.org/2000/svg&quot;,e=&quot;http://www.w3.org/1999/xlink&quot;,s=&quot;http://www.w3.org/1999/xhtml&quot;,r=2;if(document.createElementNS(t,&quot;meshgradient&quot;).x)return;const n=(t,e,s,r)=&gt;{let n=new x(.5*(e.x+s.x),.5*(e.y+s.y)),o=new x(.5*(t.x+e.x),.5*(t.y+e.y)),i=new x(.5*(s.x+r.x),.5*(s.y+r.y)),a=new x(.5*(n.x+o.x),.5*(n.y+o.y)),h=new x(.5*(n.x+i.x),.5*(n.y+i.y)),l=new x(.5*(a.x+h.x),.5*(a.y+h.y));return[[t,o,a,l],[l,h,i,r]]},o=t=&gt;{let e=t[0].distSquared(t[1]),s=t[2].distSquared(t[3]),r=.25*t[0].distSquared(t[2]),n=.25*t[1].distSquared(t[3]),o=e&gt;s?e:s,i=r&gt;n?r:n;return 18*(o&gt;i?o:i)},i=(t,e)=&gt;Math.sqrt(t.distSquared(e)),a=(t,e)=&gt;t.scale(2/3).add(e.scale(1/3)),h=t=&gt;{let e,s,r,n,o,i,a,h=new g;return t.match(/(\w+\(\s*[^)]+\))+/g).forEach(t=&gt;{let l=t.match(/[\w.-]+/g),d=l.shift();switch(d){case&quot;translate&quot;:2===l.length?e=new g(1,0,0,1,l[0],l[1]):(console.error(&quot;mesh.js: translate does not have 2 arguments!&quot;),e=new g(1,0,0,1,0,0)),h=h.append(e);break;case&quot;scale&quot;:1===l.length?s=new g(l[0],0,0,l[0],0,0):2===l.length?s=new g(l[0],0,0,l[1],0,0):(console.error(&quot;mesh.js: scale does not have 1 or 2 arguments!&quot;),s=new g(1,0,0,1,0,0)),h=h.append(s);break;case&quot;rotate&quot;:if(3===l.length&amp;&amp;(e=new g(1,0,0,1,l[1],l[2]),h=h.append(e)),l[0]){r=l[0]*Math.PI/180;let t=Math.cos(r),e=Math.sin(r);Math.abs(t)&lt;1e-16&amp;&amp;(t=0),Math.abs(e)&lt;1e-16&amp;&amp;(e=0),a=new g(t,e,-e,t,0,0),h=h.append(a)}else console.error(&quot;math.js: No argument to rotate transform!&quot;);3===l.length&amp;&amp;(e=new g(1,0,0,1,-l[1],-l[2]),h=h.append(e));break;case&quot;skewX&quot;:l[0]?(r=l[0]*Math.PI/180,n=Math.tan(r),o=new g(1,0,n,1,0,0),h=h.append(o)):console.error(&quot;math.js: No argument to skewX transform!&quot;);break;case&quot;skewY&quot;:l[0]?(r=l[0]*Math.PI/180,n=Math.tan(r),i=new g(1,n,0,1,0,0),h=h.append(i)):console.error(&quot;math.js: No argument to skewY transform!&quot;);break;case&quot;matrix&quot;:6===l.length?h=h.append(new g(...l)):console.error(&quot;math.js: Incorrect number of arguments for matrix!&quot;);break;default:console.error(&quot;mesh.js: Unhandled transform type: &quot;+d)}}),h},l=t=&gt;{let e=[],s=t.split(/[ ,]+/);for(let t=0,r=s.length-1;t&lt;r;t+=2)e.push(new x(parseFloat(s[t]),parseFloat(s[t+1])));return e},d=(t,e)=&gt;{for(let s in e)t.setAttribute(s,e[s])},c=(t,e,s,r,n)=&gt;{let o,i,a=[0,0,0,0];for(let h=0;h&lt;3;++h)e[h]&lt;t[h]&amp;&amp;e[h]&lt;s[h]||t[h]&lt;e[h]&amp;&amp;s[h]&lt;e[h]?a[h]=0:(a[h]=.5*((e[h]-t[h])/r+(s[h]-e[h])/n),o=Math.abs(3*(e[h]-t[h])/r),i=Math.abs(3*(s[h]-e[h])/n),a[h]&gt;o?a[h]=o:a[h]&gt;i&amp;&amp;(a[h]=i));return a},u=[[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0],[-3,3,0,0,-2,-1,0,0,0,0,0,0,0,0,0,0],[2,-2,0,0,1,1,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0],[0,0,0,0,0,0,0,0,-3,3,0,0,-2,-1,0,0],[0,0,0,0,0,0,0,0,2,-2,0,0,1,1,0,0],[-3,0,3,0,0,0,0,0,-2,0,-1,0,0,0,0,0],[0,0,0,0,-3,0,3,0,0,0,0,0,-2,0,-1,0],[9,-9,-9,9,6,3,-6,-3,6,-6,3,-3,4,2,2,1],[-6,6,6,-6,-3,-3,3,3,-4,4,-2,2,-2,-2,-1,-1],[2,0,-2,0,0,0,0,0,1,0,1,0,0,0,0,0],[0,0,0,0,2,0,-2,0,0,0,0,0,1,0,1,0],[-6,6,6,-6,-4,-2,4,2,-3,3,-3,3,-2,-1,-2,-1],[4,-4,-4,4,2,2,-2,-2,2,-2,2,-2,1,1,1,1]],f=t=&gt;{let e=[];for(let s=0;s&lt;16;++s){e[s]=0;for(let r=0;r&lt;16;++r)e[s]+=u[s][r]*t[r]}return e},p=(t,e,s)=&gt;{const r=e*e,n=s*s,o=e*e*e,i=s*s*s;return t[0]+t[1]*e+t[2]*r+t[3]*o+t[4]*s+t[5]*s*e+t[6]*s*r+t[7]*s*o+t[8]*n+t[9]*n*e+t[10]*n*r+t[11]*n*o+t[12]*i+t[13]*i*e+t[14]*i*r+t[15]*i*o},y=t=&gt;{let e=[],s=[],r=[];for(let s=0;s&lt;4;++s)e[s]=[],e[s][0]=n(t[0][s],t[1][s],t[2][s],t[3][s]),e[s][1]=[],e[s][1].push(...n(...e[s][0][0])),e[s][1].push(...n(...e[s][0][1])),e[s][2]=[],e[s][2].push(...n(...e[s][1][0])),e[s][2].push(...n(...e[s][1][1])),e[s][2].push(...n(...e[s][1][2])),e[s][2].push(...n(...e[s][1][3]));for(let t=0;t&lt;8;++t){s[t]=[];for(let r=0;r&lt;4;++r)s[t][r]=[],s[t][r][0]=n(e[0][2][t][r],e[1][2][t][r],e[2][2][t][r],e[3][2][t][r]),s[t][r][1]=[],s[t][r][1].push(...n(...s[t][r][0][0])),s[t][r][1].push(...n(...s[t][r][0][1])),s[t][r][2]=[],s[t][r][2].push(...n(...s[t][r][1][0])),s[t][r][2].push(...n(...s[t][r][1][1])),s[t][r][2].push(...n(...s[t][r][1][2])),s[t][r][2].push(...n(...s[t][r][1][3]))}for(let t=0;t&lt;8;++t){r[t]=[];for(let e=0;e&lt;8;++e)r[t][e]=[],r[t][e][0]=s[t][0][2][e],r[t][e][1]=s[t][1][2][e],r[t][e][2]=s[t][2][2][e],r[t][e][3]=s[t][3][2][e]}return r};class x{constructor(t,e){this.x=t||0,this.y=e||0}toString(){return`(x=${this.x}, y=${this.y})`}clone(){return new x(this.x,this.y)}add(t){return new x(this.x+t.x,this.y+t.y)}scale(t){return void 0===t.x?new x(this.x*t,this.y*t):new x(this.x*t.x,this.y*t.y)}distSquared(t){let e=this.x-t.x,s=this.y-t.y;return e*e+s*s}transform(t){let e=this.x*t.a+this.y*t.c+t.e,s=this.x*t.b+this.y*t.d+t.f;return new x(e,s)}}class g{constructor(t,e,s,r,n,o){void 0===t?(this.a=1,this.b=0,this.c=0,this.d=1,this.e=0,this.f=0):(this.a=t,this.b=e,this.c=s,this.d=r,this.e=n,this.f=o)}toString(){return`affine: ${this.a} ${this.c} ${this.e} \n       ${this.b} ${this.d} ${this.f}`}append(t){t instanceof g||console.error(&quot;mesh.js: argument to Affine.append is not affine!&quot;);let e=this.a*t.a+this.c*t.b,s=this.b*t.a+this.d*t.b,r=this.a*t.c+this.c*t.d,n=this.b*t.c+this.d*t.d,o=this.a*t.e+this.c*t.f+this.e,i=this.b*t.e+this.d*t.f+this.f;return new g(e,s,r,n,o,i)}}class w{constructor(t,e){this.nodes=t,this.colors=e}paintCurve(t,e){if(o(this.nodes)&gt;r){const s=n(...this.nodes);let r=[[],[]],o=[[],[]];for(let t=0;t&lt;4;++t)r[0][t]=this.colors[0][t],r[1][t]=(this.colors[0][t]+this.colors[1][t])/2,o[0][t]=r[1][t],o[1][t]=this.colors[1][t];let i=new w(s[0],r),a=new w(s[1],o);i.paintCurve(t,e),a.paintCurve(t,e)}else{let s=Math.round(this.nodes[0].x);if(s&gt;=0&amp;&amp;s&lt;e){let r=4*(~~this.nodes[0].y*e+s);t[r]=Math.round(this.colors[0][0]),t[r+1]=Math.round(this.colors[0][1]),t[r+2]=Math.round(this.colors[0][2]),t[r+3]=Math.round(this.colors[0][3])}}}}class m{constructor(t,e){this.nodes=t,this.colors=e}split(){let t=[[],[],[],[]],e=[[],[],[],[]],s=[[[],[]],[[],[]]],r=[[[],[]],[[],[]]];for(let s=0;s&lt;4;++s){const r=n(this.nodes[0][s],this.nodes[1][s],this.nodes[2][s],this.nodes[3][s]);t[0][s]=r[0][0],t[1][s]=r[0][1],t[2][s]=r[0][2],t[3][s]=r[0][3],e[0][s]=r[1][0],e[1][s]=r[1][1],e[2][s]=r[1][2],e[3][s]=r[1][3]}for(let t=0;t&lt;4;++t)s[0][0][t]=this.colors[0][0][t],s[0][1][t]=this.colors[0][1][t],s[1][0][t]=(this.colors[0][0][t]+this.colors[1][0][t])/2,s[1][1][t]=(this.colors[0][1][t]+this.colors[1][1][t])/2,r[0][0][t]=s[1][0][t],r[0][1][t]=s[1][1][t],r[1][0][t]=this.colors[1][0][t],r[1][1][t]=this.colors[1][1][t];return[new m(t,s),new m(e,r)]}paint(t,e){let s,n=!1;for(let t=0;t&lt;4;++t)if((s=o([this.nodes[0][t],this.nodes[1][t],this.nodes[2][t],this.nodes[3][t]]))&gt;r){n=!0;break}if(n){let s=this.split();s[0].paint(t,e),s[1].paint(t,e)}else{new w([...this.nodes[0]],[...this.colors[0]]).paintCurve(t,e)}}}class b{constructor(t){this.readMesh(t),this.type=t.getAttribute(&quot;type&quot;)||&quot;bilinear&quot;}readMesh(t){let e=[[]],s=[[]],r=Number(t.getAttribute(&quot;x&quot;)),n=Number(t.getAttribute(&quot;y&quot;));e[0][0]=new x(r,n);let o=t.children;for(let t=0,r=o.length;t&lt;r;++t){e[3*t+1]=[],e[3*t+2]=[],e[3*t+3]=[],s[t+1]=[];let r=o[t].children;for(let n=0,o=r.length;n&lt;o;++n){let o=r[n].children;for(let r=0,i=o.length;r&lt;i;++r){let i=r;0!==t&amp;&amp;++i;let h,d=o[r].getAttribute(&quot;path&quot;),c=&quot;l&quot;;null!=d&amp;&amp;(c=(h=d.match(/\s*([lLcC])\s*(.*)/))[1]);let u=l(h[2]);switch(c){case&quot;l&quot;:0===i?(e[3*t][3*n+3]=u[0].add(e[3*t][3*n]),e[3*t][3*n+1]=a(e[3*t][3*n],e[3*t][3*n+3]),e[3*t][3*n+2]=a(e[3*t][3*n+3],e[3*t][3*n])):1===i?(e[3*t+3][3*n+3]=u[0].add(e[3*t][3*n+3]),e[3*t+1][3*n+3]=a(e[3*t][3*n+3],e[3*t+3][3*n+3]),e[3*t+2][3*n+3]=a(e[3*t+3][3*n+3],e[3*t][3*n+3])):2===i?(0===n&amp;&amp;(e[3*t+3][3*n+0]=u[0].add(e[3*t+3][3*n+3])),e[3*t+3][3*n+1]=a(e[3*t+3][3*n],e[3*t+3][3*n+3]),e[3*t+3][3*n+2]=a(e[3*t+3][3*n+3],e[3*t+3][3*n])):(e[3*t+1][3*n]=a(e[3*t][3*n],e[3*t+3][3*n]),e[3*t+2][3*n]=a(e[3*t+3][3*n],e[3*t][3*n]));break;case&quot;L&quot;:0===i?(e[3*t][3*n+3]=u[0],e[3*t][3*n+1]=a(e[3*t][3*n],e[3*t][3*n+3]),e[3*t][3*n+2]=a(e[3*t][3*n+3],e[3*t][3*n])):1===i?(e[3*t+3][3*n+3]=u[0],e[3*t+1][3*n+3]=a(e[3*t][3*n+3],e[3*t+3][3*n+3]),e[3*t+2][3*n+3]=a(e[3*t+3][3*n+3],e[3*t][3*n+3])):2===i?(0===n&amp;&amp;(e[3*t+3][3*n+0]=u[0]),e[3*t+3][3*n+1]=a(e[3*t+3][3*n],e[3*t+3][3*n+3]),e[3*t+3][3*n+2]=a(e[3*t+3][3*n+3],e[3*t+3][3*n])):(e[3*t+1][3*n]=a(e[3*t][3*n],e[3*t+3][3*n]),e[3*t+2][3*n]=a(e[3*t+3][3*n],e[3*t][3*n]));break;case&quot;c&quot;:0===i?(e[3*t][3*n+1]=u[0].add(e[3*t][3*n]),e[3*t][3*n+2]=u[1].add(e[3*t][3*n]),e[3*t][3*n+3]=u[2].add(e[3*t][3*n])):1===i?(e[3*t+1][3*n+3]=u[0].add(e[3*t][3*n+3]),e[3*t+2][3*n+3]=u[1].add(e[3*t][3*n+3]),e[3*t+3][3*n+3]=u[2].add(e[3*t][3*n+3])):2===i?(e[3*t+3][3*n+2]=u[0].add(e[3*t+3][3*n+3]),e[3*t+3][3*n+1]=u[1].add(e[3*t+3][3*n+3]),0===n&amp;&amp;(e[3*t+3][3*n+0]=u[2].add(e[3*t+3][3*n+3]))):(e[3*t+2][3*n]=u[0].add(e[3*t+3][3*n]),e[3*t+1][3*n]=u[1].add(e[3*t+3][3*n]));break;case&quot;C&quot;:0===i?(e[3*t][3*n+1]=u[0],e[3*t][3*n+2]=u[1],e[3*t][3*n+3]=u[2]):1===i?(e[3*t+1][3*n+3]=u[0],e[3*t+2][3*n+3]=u[1],e[3*t+3][3*n+3]=u[2]):2===i?(e[3*t+3][3*n+2]=u[0],e[3*t+3][3*n+1]=u[1],0===n&amp;&amp;(e[3*t+3][3*n+0]=u[2])):(e[3*t+2][3*n]=u[0],e[3*t+1][3*n]=u[1]);break;default:console.error(&quot;mesh.js: &quot;+c+&quot; invalid path type.&quot;)}if(0===t&amp;&amp;0===n||r&gt;0){let e=window.getComputedStyle(o[r]).stopColor.match(/^rgb\s*\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*\)$/i),a=window.getComputedStyle(o[r]).stopOpacity,h=255;a&amp;&amp;(h=Math.floor(255*a)),e&amp;&amp;(0===i?(s[t][n]=[],s[t][n][0]=Math.floor(e[1]),s[t][n][1]=Math.floor(e[2]),s[t][n][2]=Math.floor(e[3]),s[t][n][3]=h):1===i?(s[t][n+1]=[],s[t][n+1][0]=Math.floor(e[1]),s[t][n+1][1]=Math.floor(e[2]),s[t][n+1][2]=Math.floor(e[3]),s[t][n+1][3]=h):2===i?(s[t+1][n+1]=[],s[t+1][n+1][0]=Math.floor(e[1]),s[t+1][n+1][1]=Math.floor(e[2]),s[t+1][n+1][2]=Math.floor(e[3]),s[t+1][n+1][3]=h):3===i&amp;&amp;(s[t+1][n]=[],s[t+1][n][0]=Math.floor(e[1]),s[t+1][n][1]=Math.floor(e[2]),s[t+1][n][2]=Math.floor(e[3]),s[t+1][n][3]=h))}}e[3*t+1][3*n+1]=new x,e[3*t+1][3*n+2]=new x,e[3*t+2][3*n+1]=new x,e[3*t+2][3*n+2]=new x,e[3*t+1][3*n+1].x=(-4*e[3*t][3*n].x+6*(e[3*t][3*n+1].x+e[3*t+1][3*n].x)+-2*(e[3*t][3*n+3].x+e[3*t+3][3*n].x)+3*(e[3*t+3][3*n+1].x+e[3*t+1][3*n+3].x)+-1*e[3*t+3][3*n+3].x)/9,e[3*t+1][3*n+2].x=(-4*e[3*t][3*n+3].x+6*(e[3*t][3*n+2].x+e[3*t+1][3*n+3].x)+-2*(e[3*t][3*n].x+e[3*t+3][3*n+3].x)+3*(e[3*t+3][3*n+2].x+e[3*t+1][3*n].x)+-1*e[3*t+3][3*n].x)/9,e[3*t+2][3*n+1].x=(-4*e[3*t+3][3*n].x+6*(e[3*t+3][3*n+1].x+e[3*t+2][3*n].x)+-2*(e[3*t+3][3*n+3].x+e[3*t][3*n].x)+3*(e[3*t][3*n+1].x+e[3*t+2][3*n+3].x)+-1*e[3*t][3*n+3].x)/9,e[3*t+2][3*n+2].x=(-4*e[3*t+3][3*n+3].x+6*(e[3*t+3][3*n+2].x+e[3*t+2][3*n+3].x)+-2*(e[3*t+3][3*n].x+e[3*t][3*n+3].x)+3*(e[3*t][3*n+2].x+e[3*t+2][3*n].x)+-1*e[3*t][3*n].x)/9,e[3*t+1][3*n+1].y=(-4*e[3*t][3*n].y+6*(e[3*t][3*n+1].y+e[3*t+1][3*n].y)+-2*(e[3*t][3*n+3].y+e[3*t+3][3*n].y)+3*(e[3*t+3][3*n+1].y+e[3*t+1][3*n+3].y)+-1*e[3*t+3][3*n+3].y)/9,e[3*t+1][3*n+2].y=(-4*e[3*t][3*n+3].y+6*(e[3*t][3*n+2].y+e[3*t+1][3*n+3].y)+-2*(e[3*t][3*n].y+e[3*t+3][3*n+3].y)+3*(e[3*t+3][3*n+2].y+e[3*t+1][3*n].y)+-1*e[3*t+3][3*n].y)/9,e[3*t+2][3*n+1].y=(-4*e[3*t+3][3*n].y+6*(e[3*t+3][3*n+1].y+e[3*t+2][3*n].y)+-2*(e[3*t+3][3*n+3].y+e[3*t][3*n].y)+3*(e[3*t][3*n+1].y+e[3*t+2][3*n+3].y)+-1*e[3*t][3*n+3].y)/9,e[3*t+2][3*n+2].y=(-4*e[3*t+3][3*n+3].y+6*(e[3*t+3][3*n+2].y+e[3*t+2][3*n+3].y)+-2*(e[3*t+3][3*n].y+e[3*t][3*n+3].y)+3*(e[3*t][3*n+2].y+e[3*t+2][3*n].y)+-1*e[3*t][3*n].y)/9}}this.nodes=e,this.colors=s}paintMesh(t,e){let s=(this.nodes.length-1)/3,r=(this.nodes[0].length-1)/3;if(&quot;bilinear&quot;===this.type||s&lt;2||r&lt;2){let n;for(let o=0;o&lt;s;++o)for(let s=0;s&lt;r;++s){let r=[];for(let t=3*o,e=3*o+4;t&lt;e;++t)r.push(this.nodes[t].slice(3*s,3*s+4));let i=[];i.push(this.colors[o].slice(s,s+2)),i.push(this.colors[o+1].slice(s,s+2)),(n=new m(r,i)).paint(t,e)}}else{let n,o,a,h,l,d,u;const x=s,g=r;s++,r++;let w=new Array(s);for(let t=0;t&lt;s;++t){w[t]=new Array(r);for(let e=0;e&lt;r;++e)w[t][e]=[],w[t][e][0]=this.nodes[3*t][3*e],w[t][e][1]=this.colors[t][e]}for(let t=0;t&lt;s;++t)for(let e=0;e&lt;r;++e)0!==t&amp;&amp;t!==x&amp;&amp;(n=i(w[t-1][e][0],w[t][e][0]),o=i(w[t+1][e][0],w[t][e][0]),w[t][e][2]=c(w[t-1][e][1],w[t][e][1],w[t+1][e][1],n,o)),0!==e&amp;&amp;e!==g&amp;&amp;(n=i(w[t][e-1][0],w[t][e][0]),o=i(w[t][e+1][0],w[t][e][0]),w[t][e][3]=c(w[t][e-1][1],w[t][e][1],w[t][e+1][1],n,o));for(let t=0;t&lt;r;++t){w[0][t][2]=[],w[x][t][2]=[];for(let e=0;e&lt;4;++e)n=i(w[1][t][0],w[0][t][0]),o=i(w[x][t][0],w[x-1][t][0]),w[0][t][2][e]=n&gt;0?2*(w[1][t][1][e]-w[0][t][1][e])/n-w[1][t][2][e]:0,w[x][t][2][e]=o&gt;0?2*(w[x][t][1][e]-w[x-1][t][1][e])/o-w[x-1][t][2][e]:0}for(let t=0;t&lt;s;++t){w[t][0][3]=[],w[t][g][3]=[];for(let e=0;e&lt;4;++e)n=i(w[t][1][0],w[t][0][0]),o=i(w[t][g][0],w[t][g-1][0]),w[t][0][3][e]=n&gt;0?2*(w[t][1][1][e]-w[t][0][1][e])/n-w[t][1][3][e]:0,w[t][g][3][e]=o&gt;0?2*(w[t][g][1][e]-w[t][g-1][1][e])/o-w[t][g-1][3][e]:0}for(let s=0;s&lt;x;++s)for(let r=0;r&lt;g;++r){let n=i(w[s][r][0],w[s+1][r][0]),o=i(w[s][r+1][0],w[s+1][r+1][0]),c=i(w[s][r][0],w[s][r+1][0]),x=i(w[s+1][r][0],w[s+1][r+1][0]),g=[[],[],[],[]];for(let t=0;t&lt;4;++t){(d=[])[0]=w[s][r][1][t],d[1]=w[s+1][r][1][t],d[2]=w[s][r+1][1][t],d[3]=w[s+1][r+1][1][t],d[4]=w[s][r][2][t]*n,d[5]=w[s+1][r][2][t]*n,d[6]=w[s][r+1][2][t]*o,d[7]=w[s+1][r+1][2][t]*o,d[8]=w[s][r][3][t]*c,d[9]=w[s+1][r][3][t]*x,d[10]=w[s][r+1][3][t]*c,d[11]=w[s+1][r+1][3][t]*x,d[12]=0,d[13]=0,d[14]=0,d[15]=0,u=f(d);for(let e=0;e&lt;9;++e){g[t][e]=[];for(let s=0;s&lt;9;++s)g[t][e][s]=p(u,e/8,s/8),g[t][e][s]&gt;255?g[t][e][s]=255:g[t][e][s]&lt;0&amp;&amp;(g[t][e][s]=0)}}h=[];for(let t=3*s,e=3*s+4;t&lt;e;++t)h.push(this.nodes[t].slice(3*r,3*r+4));l=y(h);for(let s=0;s&lt;8;++s)for(let r=0;r&lt;8;++r)(a=new m(l[s][r],[[[g[0][s][r],g[1][s][r],g[2][s][r],g[3][s][r]],[g[0][s][r+1],g[1][s][r+1],g[2][s][r+1],g[3][s][r+1]]],[[g[0][s+1][r],g[1][s+1][r],g[2][s+1][r],g[3][s+1][r]],[g[0][s+1][r+1],g[1][s+1][r+1],g[2][s+1][r+1],g[3][s+1][r+1]]]])).paint(t,e)}}}transform(t){if(t instanceof x)for(let e=0,s=this.nodes.length;e&lt;s;++e)for(let s=0,r=this.nodes[0].length;s&lt;r;++s)this.nodes[e][s]=this.nodes[e][s].add(t);else if(t instanceof g)for(let e=0,s=this.nodes.length;e&lt;s;++e)for(let s=0,r=this.nodes[0].length;s&lt;r;++s)this.nodes[e][s]=this.nodes[e][s].transform(t)}scale(t){for(let e=0,s=this.nodes.length;e&lt;s;++e)for(let s=0,r=this.nodes[0].length;s&lt;r;++s)this.nodes[e][s]=this.nodes[e][s].scale(t)}}document.querySelectorAll(&quot;rect,circle,ellipse,path,text&quot;).forEach((r,n)=&gt;{let o=r.getAttribute(&quot;id&quot;);o||(o=&quot;patchjs_shape&quot;+n,r.setAttribute(&quot;id&quot;,o));const i=r.style.fill.match(/^url\(\s*&quot;?\s*#([^\s&quot;]+)&quot;?\s*\)/),a=r.style.stroke.match(/^url\(\s*&quot;?\s*#([^\s&quot;]+)&quot;?\s*\)/);if(i&amp;&amp;i[1]){const a=document.getElementById(i[1]);if(a&amp;&amp;&quot;meshgradient&quot;===a.nodeName){const i=r.getBBox();let l=document.createElementNS(s,&quot;canvas&quot;);d(l,{width:i.width,height:i.height});const c=l.getContext(&quot;2d&quot;);let u=c.createImageData(i.width,i.height);const f=new b(a);&quot;objectBoundingBox&quot;===a.getAttribute(&quot;gradientUnits&quot;)&amp;&amp;f.scale(new x(i.width,i.height));const p=a.getAttribute(&quot;gradientTransform&quot;);null!=p&amp;&amp;f.transform(h(p)),&quot;userSpaceOnUse&quot;===a.getAttribute(&quot;gradientUnits&quot;)&amp;&amp;f.transform(new x(-i.x,-i.y)),f.paintMesh(u.data,l.width),c.putImageData(u,0,0);const y=document.createElementNS(t,&quot;image&quot;);d(y,{width:i.width,height:i.height,x:i.x,y:i.y});let g=l.toDataURL();y.setAttributeNS(e,&quot;xlink:href&quot;,g),r.parentNode.insertBefore(y,r),r.style.fill=&quot;none&quot;;const w=document.createElementNS(t,&quot;use&quot;);w.setAttributeNS(e,&quot;xlink:href&quot;,&quot;#&quot;+o);const m=&quot;patchjs_clip&quot;+n,M=document.createElementNS(t,&quot;clipPath&quot;);M.setAttribute(&quot;id&quot;,m),M.appendChild(w),r.parentElement.insertBefore(M,r),y.setAttribute(&quot;clip-path&quot;,&quot;url(#&quot;+m+&quot;)&quot;),u=null,l=null,g=null}}if(a&amp;&amp;a[1]){const o=document.getElementById(a[1]);if(o&amp;&amp;&quot;meshgradient&quot;===o.nodeName){const i=parseFloat(r.style.strokeWidth.slice(0,-2))*(parseFloat(r.style.strokeMiterlimit)||parseFloat(r.getAttribute(&quot;stroke-miterlimit&quot;))||1),a=r.getBBox(),l=Math.trunc(a.width+i),c=Math.trunc(a.height+i),u=Math.trunc(a.x-i/2),f=Math.trunc(a.y-i/2);let p=document.createElementNS(s,&quot;canvas&quot;);d(p,{width:l,height:c});const y=p.getContext(&quot;2d&quot;);let g=y.createImageData(l,c);const w=new b(o);&quot;objectBoundingBox&quot;===o.getAttribute(&quot;gradientUnits&quot;)&amp;&amp;w.scale(new x(l,c));const m=o.getAttribute(&quot;gradientTransform&quot;);null!=m&amp;&amp;w.transform(h(m)),&quot;userSpaceOnUse&quot;===o.getAttribute(&quot;gradientUnits&quot;)&amp;&amp;w.transform(new x(-u,-f)),w.paintMesh(g.data,p.width),y.putImageData(g,0,0);const M=document.createElementNS(t,&quot;image&quot;);d(M,{width:l,height:c,x:0,y:0});let S=p.toDataURL();M.setAttributeNS(e,&quot;xlink:href&quot;,S);const k=&quot;pattern_clip&quot;+n,A=document.createElementNS(t,&quot;pattern&quot;);d(A,{id:k,patternUnits:&quot;userSpaceOnUse&quot;,width:l,height:c,x:u,y:f}),A.appendChild(M),o.parentNode.appendChild(A),r.style.stroke=&quot;url(#&quot;+k+&quot;)&quot;,g=null,p=null,S=null}}})}();
</script></svg>
